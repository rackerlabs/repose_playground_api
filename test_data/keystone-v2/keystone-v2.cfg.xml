<?xml version="1.0" encoding="UTF-8"?>
<!--
  _=_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_=
  Repose
  _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
  Copyright (C) 2010 - 2015 Rackspace US, Inc.
  _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  =_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_=_
  -->


<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:html="http://www.w3.org/1999/xhtml"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
           xmlns:xerces="http://xerces.apache.org"
           xmlns:saxon="http://saxon.sf.net/"
           xmlns="http://docs.openrepose.org/repose/keystone-v2/v1.0"
           xmlns:kv2="http://docs.openrepose.org/repose/keystone-v2/v1.0"
           targetNamespace="http://docs.openrepose.org/repose/keystone-v2/v1.0"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

    <xs:element name="keystone-v2" type="KeystoneV2Config"/>

    <xs:complexType name="KeystoneV2Config">
        <xs:annotation>
            <xs:documentation>
                <html:p>The root config type for the Rackspace Keystone V2 filter configuration file.</html:p>
            </xs:documentation>
        </xs:annotation>

        <xs:all>
            <xs:element name="identity-service" type="IdentityServiceType" minOccurs="1" maxOccurs="1"/>
            <xs:element name="delegating" type="DelegatingType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="white-list" type="WhiteListType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="cache" type="CacheType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="tenant-handling" type="TenantHandlingType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="require-service-endpoint" type="ServiceEndpointType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="pre-authorized-roles" type="RolesList" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="WhiteListType">
        <xs:annotation>
            <xs:documentation>
                <html:p>List of URI Regular expression patterns to bypass authentication and authorization</html:p>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="uri-regex" type="xs:string" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="IdentityServiceType">
        <xs:attribute name="username" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Admin username to access Rackspace Keystone V2 identity service.</html:p>
                </xs:documentation>
            </xs:annotation>

        </xs:attribute>
        <xs:attribute name="password" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Admin user password to access Rackspace Keystone V2 identity service.</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="uri" type="xs:anyURI" use="required">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Rackspace Keystone v2 Identity Endpoint URI</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="connection-pool-id" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Http Connection pool ID to use when talking to Rackspace Keystone V2 Identity</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="set-roles-in-header" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Set the user's roles in the x-roles header</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="set-groups-in-header" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Set the user's groups in the x-pp-groups header</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="set-catalog-in-header" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Set the user's service catalog, base64 encoded in the X-Catalog header.</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:assert vc:minVersion="1.1"
                   test="if (@username or @password) then (@username and @password) else true()"
                   xerces:message="Must provide both a username and a password"
                   saxon:message="Must provide both a username and a password"/>
    </xs:complexType>

    <xs:complexType name="TenantHandlingType">
        <xs:sequence>
            <xs:element name="validate-tenant" type="ValidateTenantType" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        <html:p>
                            If this element is included, tenant validation will be enforced based on the extraction URI.
                        </html:p>
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="send-tenant-id-quality" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        <html:p>
                            If this element is included, include Quality parameters on all the tenant ID headers sent,
                            where the default tenant has the highest quality, followed by the one that matches the URI
                            (if any), followed by the tenants from the roles.
                        </html:p>
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="default-tenant-quality" type="QualityType" default="0.9" use="optional"/>
                    <xs:attribute name="uri-tenant-quality" type="QualityType" default="0.7" use="optional"/>
                    <xs:attribute name="roles-tenant-quality" type="QualityType" default="0.5" use="optional"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="send-all-tenant-ids" type="xs:boolean" default="false" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>Send all the tenant IDs from the user and the roles the user has</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="ValidateTenantType">
        <xs:sequence>
            <xs:element name="uri-extraction-regex" type="xs:string" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        <html:p>
                            Regular expression with a single matching group to extract the Tenant ID from the URI for
                            validation.
                        </html:p>
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>

        <xs:attribute name="strip-token-tenant-prefixes" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        A '/' delimited list of prefixes to attempt to strip from the tenant id in the token
                        response from the identity service. The post-strip tenant id is only used in the tenant
                        validation check.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="RolesList">
        <xs:sequence>
            <xs:element name="role" type="xs:string" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ServiceEndpointType">
        <xs:attribute name="public-url" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Public URL to match on the user's service catalog entry
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="region" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Region to match on the user's service catalog entry
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="name" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Name of the service to match in the user's service catalog entry
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Type to match in the user's service catalog entry
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="CacheType">
        <xs:sequence>
            <xs:element name="timeouts" type="CacheTimeoutsType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="atom-feed" type="AtomFeedType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>

        <xs:assert vc:minVersion="1.1"
                   test="count(kv2:atom-feed/@id) = count(distinct-values(kv2:atom-feed/@id))"
                   xerces:message="Atom Feed ID's must be unique"
                   saxon:message="Atom Feed ID's must be unique"/>
    </xs:complexType>

    <xs:complexType name="CacheTimeoutsType">
        <xs:annotation>
            <xs:documentation>
                <html:p>
                    The number of seconds which cached data will live in the datastore. Different data is cached
                    separately, so there are multiple configurable cache timeouts. Each timeout value behaves in the
                    following way:
                    If -1, caching is disabled.
                    If 0, data is cached indefinitely. In other words, data is eternal.
                    If greater than 0, data is cached for the value provided, in seconds.
                </html:p>
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="token" type="NegOneOrGreaterInteger" default="600" minOccurs="0" maxOccurs="1"/>
            <xs:element name="group" type="NegOneOrGreaterInteger" default="600" minOccurs="0" maxOccurs="1"/>
            <xs:element name="endpoints" type="NegOneOrGreaterInteger" default="600" minOccurs="0" maxOccurs="1"/>
            <!-- todo: xs:element name="user" type="ZeroOrPositiveInteger" default="600" minOccurs="0" maxOccurs="1"/-->
        </xs:all>
        <xs:attribute name="variability" type="ZeroOrPositiveInteger" default="0" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        This value will be added or subtracted to the cache timeouts to make sure that the cached items
                        have some variability so they don't all expire at the exact same time. (Defaults to no
                        variability)
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="DelegatingType">
        <xs:annotation>
            <xs:documentation>
                <html:p>
                    If present, enables delegation. Delegation will cause this filter to pass requests it would
                    ordinarily reject along with a header detailing why it would have rejected the request.
                    If not present, delegation is not enabled, and there is no change in behavior.
                </html:p>
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="quality" type="QualityType" use="optional" default="0.7">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        What quality you want any output headers to be.
                        When setting up a chain of delegating filters the highest quality number will be the one that is
                        eventually output.
                        Default is 0.7
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="AtomFeedType">
        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    <html:p>The unique ID of a feed defined in the Atom Feed service configuration.</html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="QualityType">
        <xs:restriction base="xs:double">
            <xs:minInclusive value="0"/>
            <xs:maxInclusive value="1.0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="NegOneOrGreaterInteger">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="-1"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ZeroOrPositiveInteger">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ZeroOrPositiveLong">
        <xs:restriction base="xs:long">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>